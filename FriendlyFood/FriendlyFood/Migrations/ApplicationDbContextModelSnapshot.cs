// <auto-generated />
using System;
using FriendlyFood.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FriendlyFood.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FriendlyFood.Models.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CuisineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Cuisine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Vegetarian",
                            RestaurantId = 1,
                            UserId = 0
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Vegan",
                            RestaurantId = 2,
                            UserId = 0
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Indian",
                            RestaurantId = 3,
                            UserId = 0
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Italian",
                            RestaurantId = 4,
                            UserId = 0
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Burger",
                            RestaurantId = 5,
                            UserId = 0
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Vietnamese",
                            RestaurantId = 6,
                            UserId = 0
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Mexican",
                            RestaurantId = 7,
                            UserId = 0
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Pizza",
                            RestaurantId = 8,
                            UserId = 0
                        },
                        new
                        {
                            Id = 9,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Thai",
                            RestaurantId = 9,
                            UserId = 0
                        },
                        new
                        {
                            Id = 10,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Coffee",
                            RestaurantId = 10,
                            UserId = 0
                        },
                        new
                        {
                            Id = 11,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Korean",
                            RestaurantId = 11,
                            UserId = 0
                        },
                        new
                        {
                            Id = 12,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "American",
                            RestaurantId = 12,
                            UserId = 0
                        },
                        new
                        {
                            Id = 13,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            CuisineName = "Breakfast",
                            RestaurantId = 13,
                            UserId = 0
                        });
                });

            modelBuilder.Entity("FriendlyFood.Models.DietType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DietName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("DietType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            DietName = "Vegetarian"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            DietName = "Vegan"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            DietName = "Dairy Free"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            DietName = "Gluten Free"
                        });
                });

            modelBuilder.Entity("FriendlyFood.Models.FavoriteMeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FavoriteMeal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            MealId = 1,
                            UserId = 0
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            MealId = 2,
                            UserId = 0
                        });
                });

            modelBuilder.Entity("FriendlyFood.Models.FavoriteRestaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FavoritRestaurant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            RestaurantId = 1,
                            UserId = 0
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            RestaurantId = 2,
                            UserId = 0
                        });
                });

            modelBuilder.Entity("FriendlyFood.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Meal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            Description = "Your choice of marinated, grilled organic tofu or tempeh topped w/ sauerkraut, shredded carrots, 1000 Island, spicy mustard & your choice of vegan mozzarella or dairy swiss. Served on marble rye.",
                            MealName = "Wild Reuban",
                            RestaurantId = 1,
                            UserId = 0
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            Description = "Spaghetti topped with BE-Hive seitan wheatballs, house made marinara, cashew paremsanchopped basil, parsley; served with toasted garlic bread.",
                            MealName = "Spaghetti and Wheatballs",
                            RestaurantId = 2,
                            UserId = 0
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            Description = "Dry cauliflower fritters with corn flour cooked in spicy manchurian sauce.",
                            MealName = "Gobi Manchurian",
                            RestaurantId = 3,
                            UserId = 0
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            Description = "Belly Ham, Mozzarella, Parm, Oregano, Chilies.",
                            MealName = "Pizza",
                            RestaurantId = 4,
                            UserId = 0
                        });
                });

            modelBuilder.Entity("FriendlyFood.Models.MealDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DietTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("MealDiet");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            DietTypeId = 1,
                            MealId = 1
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            DietTypeId = 2,
                            MealId = 2
                        });
                });

            modelBuilder.Entity("FriendlyFood.Models.MealImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("MealImage");
                });

            modelBuilder.Entity("FriendlyFood.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CuisineId")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Restaurant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1100 Fatherland St SUITE 104",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 1,
                            RestaurantName = "Wild Cow",
                            UserId = 0,
                            ZipCode = 37206
                        },
                        new
                        {
                            Id = 2,
                            Address = "1888 Eastland Ave",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 2,
                            RestaurantName = "Graze",
                            UserId = 0,
                            ZipCode = 37206
                        },
                        new
                        {
                            Id = 3,
                            Address = "3415 West End Ave",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 3,
                            RestaurantName = "Woodlands",
                            UserId = 0,
                            ZipCode = 37203
                        },
                        new
                        {
                            Id = 4,
                            Address = "1222 4th Ave N",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 4,
                            RestaurantName = "City House",
                            UserId = 0,
                            ZipCode = 37208
                        },
                        new
                        {
                            Id = 5,
                            Address = "4013 Charlotte Ave",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 5,
                            RestaurantName = "Farm Burger",
                            UserId = 0,
                            ZipCode = 37209
                        },
                        new
                        {
                            Id = 6,
                            Address = "2112 8th Ave S",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 6,
                            RestaurantName = "Love Peace & Pho",
                            UserId = 0,
                            ZipCode = 37204
                        },
                        new
                        {
                            Id = 7,
                            Address = "416 21st Ave S",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 7,
                            RestaurantName = "San Antonio Taco Co",
                            UserId = 0,
                            ZipCode = 37203
                        },
                        new
                        {
                            Id = 8,
                            Address = "1925 Broadway",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 8,
                            RestaurantName = "Two Boots Nashville",
                            UserId = 0,
                            ZipCode = 37203
                        },
                        new
                        {
                            Id = 9,
                            Address = "316 Mccall St",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 9,
                            RestaurantName = "Siam Cafe",
                            UserId = 0,
                            ZipCode = 37211
                        },
                        new
                        {
                            Id = 10,
                            Address = "15 Hermitage Ave",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 10,
                            RestaurantName = "Crema",
                            UserId = 0,
                            ZipCode = 37204
                        },
                        new
                        {
                            Id = 11,
                            Address = "6410 Charlotte Pike #108",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 11,
                            RestaurantName = "Korea House",
                            UserId = 0,
                            ZipCode = 37209
                        },
                        new
                        {
                            Id = 12,
                            Address = "1200 4th Ave N",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 12,
                            RestaurantName = "Henrietta Red",
                            UserId = 0,
                            ZipCode = 37208
                        },
                        new
                        {
                            Id = 13,
                            Address = "1000 Main St",
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            City = "Nashville",
                            CuisineId = 13,
                            RestaurantName = "Marché Artisan Foods",
                            UserId = 0,
                            ZipCode = 37206
                        });
                });

            modelBuilder.Entity("FriendlyFood.Models.RestaurantDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DietTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RestaurantDiet");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            DietTypeId = 1,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            DietTypeId = 2,
                            RestaurantId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FriendlyFood.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b252cbd-bdd7-4516-bb19-0f7aaf4f6418",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAdOzZhz0A8tGnTIbwOv4V9a/R8dDxXJFUL+YtlkkTnLX/+LmPBGdlR/VcWQWz7Y8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com",
                            City = "Nashville",
                            FirstName = "admin",
                            LastName = "admin",
                            ZipCode = "37220"
                        });
                });

            modelBuilder.Entity("FriendlyFood.Models.Cuisine", b =>
                {
                    b.HasOne("FriendlyFood.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FriendlyFood.Models.DietType", b =>
                {
                    b.HasOne("FriendlyFood.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FriendlyFood.Models.FavoriteMeal", b =>
                {
                    b.HasOne("FriendlyFood.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FriendlyFood.Models.FavoriteRestaurant", b =>
                {
                    b.HasOne("FriendlyFood.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FriendlyFood.Models.Meal", b =>
                {
                    b.HasOne("FriendlyFood.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FriendlyFood.Models.MealDiet", b =>
                {
                    b.HasOne("FriendlyFood.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FriendlyFood.Models.MealImage", b =>
                {
                    b.HasOne("FriendlyFood.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FriendlyFood.Models.Restaurant", b =>
                {
                    b.HasOne("FriendlyFood.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FriendlyFood.Models.RestaurantDiet", b =>
                {
                    b.HasOne("FriendlyFood.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
